#!/usr/bin/env python3

import sys, time, argparse, subprocess, os.path

Description = """
Tool to build the fully-functional br-index using Prefix-Free Parsing method.

Prefix-Free Parsing uses the approach described in

   "Prefix-Free Parsing for Building Big BWTs"
   by Christina Boucher, Travis Gagie, Alan Kuhnle and Giovanni Manzini
   Proc. WABI '18 (http://drops.dagstuhl.de/opus/volltexte/2018/9304/)

The input file cannot contain the characters 0, 1 or 2 which are
used internally by the algorithm. The character 0 is used as the EOF
in the output BWT. The dictionary and the parse should not be larger than 2GB. 

The in-memory construction without PFP is also supported (-i option), but consumes much memory.
Just use it for testing on short texts.
"""

# absolute path of auxiliary executables
dirname = os.path.dirname(os.path.abspath(__file__))
bigbwt_exe      =  os.path.join(dirname, "pfpbuilder", "bigbwt")
build_exe       =  os.path.join(dirname, "pfpbuild")
shasum_exe      =  "sha256sum"

EXTIDX = ".bri"


def main():
    parser = argparse.ArgumentParser(description=Description, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('input', help='input file name', type=str)
    parser.add_argument('-o', '--output', help='output index file basename', default="", type=str)
    parser.add_argument('-l', '--bl', help='parameter bl of br-index (def. 8)', default=8, type=int)
    parser.add_argument('-w', '--wsize', help='PFP\'s sliding window size (def. 10)', default=10, type=int)
    parser.add_argument('-p', '--mod', help='PFP\'s hash modulus (def. 100)', default=100, type=int)
    parser.add_argument('-t', help='number of helper threads (def. None)', default=0, type=int)
    parser.add_argument('-k', help='keep temporary files',action='store_true')
    parser.add_argument('-v', help='verbose',action='store_true')
    parser.add_argument('-i', help='in-memory construction',action='store_true')
    parser.add_argument('--sum', help='compute output files sha256sum',action='store_true')
    args = parser.parse_args()

    logfile_name = args.input + ".log"
    print("Sending logging messages to file:", logfile_name)
    with open(logfile_name,"a") as logfile:

        start0 = start = time.time()

        if args.i:
            # ---- in-memory build br-index
            command = "{exe} {file} -l {length} -i".format(exe=build_exe,
                file=args.input, length=args.bl)
            if args.output != "":
                command += " -o {}".format(args.output)
            if args.v: command += " -v"
            print("==== In-memory br-index build. Command: ", command)
            if(execute_command(command,logfile,logfile_name)!=True):
                sys.exit(1)
            print("==== Build complete")
            print("Elapsed time: {0:.4f}".format(time.time()-start))
            print()
            return

        # ---- compute .bwt, .ssa, .esa with PFP
        command = "{exe} {file} -w {wsize} -p {modulus} -t {th} -s -e".format(exe=bigbwt_exe,
            wsize=args.wsize, modulus=args.mod, th=args.t, file=args.input)
        if args.v: command += " -v"

        print("==== Computing PFP forwards. Command: ", command)
        if(execute_command(command,logfile,logfile_name)!=True):
            sys.exit(1)
        print("Elapsed time: {0:.4f}".format(time.time()-start))


        # ---- compute .rev.bwt, .rev.ssa, .rev.esa with PFP
        start = time.time()

        command = "{exe} {file} -w {wsize} -p {modulus} -t {th} -r -s -e".format(exe=bigbwt_exe,
            wsize=args.wsize, modulus=args.mod, th=args.t, file=args.input)
        if args.v: command += " -v"

        print("==== Computing PFP backwards. Command: ", command)
        if(execute_command(command,logfile,logfile_name)!=True):
            sys.exit(1)
        print("Elapsed time: {0:.4f}".format(time.time()-start))


        # ---- build br-index
        start = time.time()

        command = "{exe} {file} -l {length}".format(exe=build_exe,
            file=args.input, length=args.bl)
        if args.output != "":
            command += " -o {}".format(args.output)
        if args.v: command += " -v"

        print("==== Building br-index from PFP. Command: ", command)
        if(execute_command(command,logfile,logfile_name)!=True):
            sys.exit(1)
        print("Elapsed time: {0:.4f}".format(time.time()-start))
        total_time = time.time() - start0

        # ---- compute sha256sum
        if args.sum:
            if args.output=="":
                digest = file_digest(args.input + EXTIDX,logfile)
                print("BRI {exe}: {digest}".format(exe=shasum_exe, digest=digest))
            else:
                digest = file_digest(args.output + EXTIDX,logfile)
                print("BRI {exe}: {digest}".format(exe=shasum_exe, digest=digest))

        # ---- delete intermediate files
        delete_temp_files(args,logfile,logfile_name)

        print("==== Build complete")
        print("Total construction time: {0:.4f}".format(total_time))
        print()



# delete intermediate files
def delete_temp_files(args,logfile,logfile_name):
    if args.k==False:  
        print("==== Deleting temporary files.") # no need to show the command
        command = "rm -f {file}.bwt {file}.ssa {file}.esa {file}.rev.bwt {file}.rev.ssa {file}.rev.esa".format(file=args.input)
        if(execute_command(command,logfile,logfile_name)!=True):
            sys.exit(1)


# compute hash digest for a file 
def file_digest(name,logfile):
    try:
        hash_command = "{exe} {infile}".format(exe=shasum_exe, infile=name)
        hashsum = subprocess.check_output(hash_command.split(),stderr=logfile)
        hashsum = hashsum.decode("utf-8").split()[0]
    except:
        hashsum = "Error!" 
    return hashsum  

# execute command: return True is everything OK, False otherwise
def execute_command(command,logfile,logfile_name,env=None):
    try:
        #subprocess.run(command.split(),stdout=logfile,stderr=logfile,check=True,env=env)
        subprocess.check_call(command.split(),stdout=logfile,stderr=logfile,env=env)
    except subprocess.CalledProcessError:
        print("Error executing command line:")
        print("\t"+ command)
        print("Check log file: " + logfile_name)
        return False
    return True

if __name__ == '__main__':
    main()