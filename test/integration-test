#!/usr/bin/env python3

import sys, time, argparse, subprocess, os, random

Description = """
br-index integration test script.


やること

- datasetディレクトリの全ファイルについてイテレーションする
以下は一つのテキストについて

- パターンに確率1/20ぐらいで変異を起こしたファイルを作ってtest-tmpに格納する
- test-tmpにin-memoryなビルドとPFPなビルドを行った(bl=64で)インデックスファイルを格納
- それぞれをbl=0、bl=64の2パターンでロードする

→ビルドは2パターンだが、その後のテストは合計4パターン

ただ、各インデックスファイルに対するテストは同じ内容になるので、ここからをC++実行ファイルで作成する


テスト内容：

- left-extension
- right-extension
- left-contraction
- right-contraction
窓を左から右へスライド、スライド長さはしんどさ考えると10000prefixか
これを長さ2, 3, 4, 5, 10, 20, ..., 100 までやる
事前にKRhashを登録しておいて数が分かるように
=> right-extensionのみとleft-extensionのみで行うものと、
=> left-contractionとright-extensionのテスト
bl=0のやつについてはbl=10から

50までのKRhashをすべて登録しておく

100000を長さ50のパターンで分割してブロック分けする(最後が端数になったらそれは除外)
それぞれのブロックについて、
- left-extensionのみで長さ50まで, KRhashでカウントの一致確認、長さ10以上のときはlocateの妥当性も追加で
    - 妥当でないならアウト
    - そこからleft-contractionのみで最後まで、その全過程でlocateの妥当性
    - right-contractionのみで最後まで、その全過程でlocateの妥当性
- right-extensionのみで長さ50まで、その全過程でlocateの妥当性

最初のブロックのみ長さ10以下のパターンでのlocateの妥当性も全確認する

- MEMs
左からと右から、それぞれMEMsを行う
確かにMaximalになっていることも確認したいし、全locateが正しいことも確認したい



"""

# absolute path of related directories
dirname = os.path.dirname(os.path.abspath(__file__))
data_dir = os.path.join(dirname,"dataset")
build_dir = os.path.abspath(os.path.join(dirname, os.pardir))
temp_dir = os.path.join(dirname,"test-tmp")

build_exe = os.path.join(build_dir, "bri-build")
test1_exe = os.path.join(dirname,"itest1")
test2_exe = os.path.join(dirname,"itest2")

EXTIDX = ".bri"
EXTIN = ".in"
EXTPFP = ".pfp"

# probability of character mutation for Test2
MUT_PROB = 0.05

def main():
    print("br-index integration test.")
    print("Datasets are read from {}".format(data_dir))
    print("Index files and temporary files will be put to {}".format(temp_dir))

    start0 = start = time.time()
    command = ""

    logfile_name = os.path.join(dirname, "i-test.log")
    print("Sending logging messages to file: i-test.log")

    with open(logfile_name,"a") as logfile:

        data_files = [(os.path.join(data_dir,x), os.path.join(temp_dir,x) , os.path.join(temp_dir,x+".mut")) for x in os.listdir(data_dir) if os.path.isfile(os.path.join(data_dir,x)) and x.endswith(".txt")]
        print("List of detected dataset:")
        for (x,y,z) in data_files:
            print("- "+x)

        print("======== Build br-index on each text (In-memory & Prefix-Free Parsing, bl=64)")
        for (input_file, idx_base, _) in data_files:
            print("==== Build on " + input_file)

            command = "{exe} {file} -o {output} -l 64 -i".format(exe=build_exe,
                file=input_file, output=idx_base+EXTIN)
            print("==== In-memory build. Command: ", command)
            if(execute_command(command,logfile,logfile_name)!=True):
                return
            print("==== In-memory build complete")

            command = "{exe} {file} -o {output} -l 64".format(exe=build_exe,
                file=input_file, output=idx_base+EXTPFP)
            print("==== PFP build. Command: ", command)
            if(execute_command(command,logfile,logfile_name)!=True):
                return
            print("==== PFP build complete")
        print("======== All build complete")
        print("Elapsed time: {0:.4f}".format(time.time()-start))
            


        print("======== Test1: l-ext, r-ext, l-cont, l-cont, locate")
        for (input_file, idx_base, _) in data_files:

            start = time.time()
            print("==== Testing on " + input_file)

            command = "{exe} {file} {idx} 0".format(exe=test1_exe,
                file=input_file, idx=idx_base+EXTIN+EXTIDX)
            print("==== In-memory, bl=0. Command: ",command)
            if(execute_test(command,logfile,logfile_name)!=True):
                pass

            command = "{exe} {file} {idx} 64".format(exe=test1_exe,
                file=input_file, idx=idx_base+EXTIN+EXTIDX)
            print("==== PFP, bl=64. Command: ",command)
            if(execute_test(command,logfile,logfile_name)!=True):
                pass
            
            command = "{exe} {file} {idx} 0".format(exe=test1_exe,
                file=input_file, idx=idx_base+EXTPFP+EXTIDX)
            print("==== In-memory, bl=0. Command: ",command)
            if(execute_test(command,logfile,logfile_name)!=True):
                pass
            
            command = "{exe} {file} {idx} 64".format(exe=test1_exe,
                file=input_file, idx=idx_base+EXTPFP+EXTIDX)
            print("==== PFP, bl=64. Command: ",command)
            if(execute_test(command,logfile,logfile_name)!=True):
                pass

            print("==== Test1 on {} finished".format(input_file))
            print("Elapsed time: {0:.4f}".format(time.time()-start))

        print("======== Test1 finished")
        

        p = MUT_PROB
        print("Making pattern texts by mutating characters with prob.",p)
        for (in_file, _, out_file) in data_files:
            text = ""
            with open(in_file,mode="r") as fin:
                text = fin.read()
            with open(out_file,mode="w") as fout:
                fout.write(mutate(text,p))
                print("Mutated {} is saved to {}".format(in_file,out_file))


        print("======== Test2: computing Maximal Exact Matches")
        for (input_file, idx_base, pattern_file) in data_files:

            start = time.time()
            print("==== Testing on pattern {} & text {}".format(pattern_file,input_file))

            command = "{exe} {file} {idx} 0 {patt}".format(exe=test2_exe,
                file=input_file, idx=idx_base+EXTIN+EXTIDX, patt=pattern_file)
            print("==== In-memory, bl=0. Command: ",command)
            if(execute_test(command,logfile,logfile_name)!=True):
                pass

            command = "{exe} {file} {idx} 64 {patt}".format(exe=test2_exe,
                file=input_file, idx=idx_base+EXTIN+EXTIDX, patt=pattern_file)
            print("==== In-memory, bl=64. Command: ",command)
            if(execute_test(command,logfile,logfile_name)!=True):
                pass

            command = "{exe} {file} {idx} 0 {patt}".format(exe=test2_exe,
                file=input_file, idx=idx_base+EXTPFP+EXTIDX, patt=pattern_file)
            print("==== PFP, bl=0. Command: ",command)
            if(execute_test(command,logfile,logfile_name)!=True):
                pass

            command = "{exe} {file} {idx} 64 {patt}".format(exe=test2_exe,
                file=input_file, idx=idx_base+EXTPFP+EXTIDX, patt=pattern_file)
            print("==== PFP, bl=64. Command: ",command)
            if(execute_test(command,logfile,logfile_name)!=True):
                pass

            print("==== Test2 on {} finished".format(input_file))
            print("Elapsed time: {0:.4f}".format(time.time()-start))


        print("======== Test2 finished")



    print("======== All tests finished")
    print("Total test time: {0:.4f}".format(time.time()-start0))

# get mutated text with given prob
def mutate(source,p):
    alpha = set()
    for c in source:
        if "\0" == c or "\1" == c or "\2" == c:
            print("Error: contains reserved delimiter symbol.")
            sys.exit(1)
        alpha.add(c)
    alphabet = list(alpha)

    res = ""
    sigma = len(alphabet)
    for c in source:
        if random.random() < p:
            ri = random.randint(0,sigma-1)
            while alphabet[ri] == c:
                ri = random.randint(0,sigma-1)
            res += alphabet[ri]
        else:
            res += c
    return res

# execute command: return True is everything OK, False otherwise
def execute_command(command,logfile,logfile_name,env=None):
    try:
        #subprocess.run(command.split(),stdout=logfile,stderr=logfile,check=True,env=env)
        subprocess.check_call(command.split(),stdout=logfile,stderr=logfile,env=env)
    except subprocess.CalledProcessError:
        print("Error executing command line:")
        print("\t"+ command)
        print("Check log file: " + logfile_name)
        return False
    return True

# execute test: return True if the test passes, False otherwise
def execute_test(command,logfile,logfile_name,env=None):
    try:
        #subprocess.run(command.split(),stdout=logfile,stderr=logfile,check=True,env=env)
        subprocess.check_call(command.split(),stdout=logfile,stderr=logfile,env=env)
    except subprocess.CalledProcessError:
        print("Test failed. command:")
        print("\t"+ command)
        print("Check log file: " + logfile_name)
        return False
    return True

if __name__ == "__main__":
    main()